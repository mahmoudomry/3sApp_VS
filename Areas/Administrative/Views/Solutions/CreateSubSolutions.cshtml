@using _3sApp.Models
@model SubSolution

@{
    ViewData["Title"] = "Solutions - Sub Solution";
      ViewData["ActionTitle"] = @Model==null? "Create":"Edit";
        ViewData["FormAction"] = @Model==null? "CreateSubSolutions":"EditSubSolutions";
      ViewData["ButtonTitle"] = @Model==null? "Create":"Edit";
    Layout = "_AdminLayout";
}

<div class="row">
    <div class="col-md-8 offset-2">
        	<div class="kt-portlet">
										<div class="kt-portlet__head">
											<div class="kt-portlet__head-label">
												<h3 class="kt-portlet__head-title">
													@ViewData["ActionTitle"]
												</h3>
											</div>
										</div>
        <form asp-action="@ViewData["FormAction"]" enctype="multipart/form-data" method="post" asp-area="Administrative" asp-controller="Solutions" class="kt-form">
             @Html.AntiForgeryToken()	
            <div class="kt-portlet__body">
          @Html.ValidationSummary(true, "", new { @class = "text-danger" })
             <input type="hidden" name="Id" value="@(Model is null?0:Model.Id)" />
               @Html.HiddenFor(model => model.CoverImage)
      @Html.HiddenFor(model => model.Icon)
                 <div class="form-group">
                      @Html.Label("Solution","Solution", new { @class = "col-md-2 control-label" })
                     <select id="SolutionId" name="SolutionId" class="form-control">
                         @foreach(var item in ViewBag.Solutions as List<Solution>)
                             {
                         <option @(Model!=null &&item.Id== Model.SolutionId?"selected":"")  @(this.ViewContext.RouteData.Values["Id"]!=null &&item.Id+""== this.ViewContext.RouteData.Values["Id"].ToString()?"selected":"")  value="@item.Id">@item.Title</option>
                             }
                     </select>
                  
                        @Html.ValidationMessageFor(m => m.SolutionId, "", new { @class = "text-danger" })
                 
              
            </div>           
            <div class="form-group">
                  @Html.LabelFor(m => m.Title, new { @class = "col-md-2 control-label" })
               @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                 
              
            </div>
            <div class="form-group">
                            @Html.LabelFor(m => m.Describtion, new { @class = "col-md-2 control-label" })
               @Html.TextAreaFor(m => m.Describtion, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Describtion, "", new { @class = "text-danger" })
               
            </div>
            <div class="form-group">
                            @Html.LabelFor(m => m.Order, new { @class = "col-md-2 control-label" })
               @Html.TextBoxFor(m => m.Order, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Order, "", new { @class = "text-danger" })
               
            </div>
            <div class="form-group">

                @if(Model!=null&&Model.CoverImage!=null)
                        {
                    <img src="~/assets/images/@Model.CoverImage" width="100px" />        
                        }
                        @Html.LabelFor(m => m.CoverImage, new { @class = "col-md-2 control-label" })
              <input  name="CoverImage" type="file" class="form-control" />
                        @Html.ValidationMessageFor(m => m.CoverImage, "", new { @class = "text-danger" })
              
            </div>
             <div class="form-group">

                @if(Model!=null&&Model.Icon!=null)
                        {
                    <img src="~/assets/images/@Model.Icon" width="100px" />        
                        }
                        @Html.LabelFor(m => m.Icon, new { @class = "col-md-2 control-label" })
              <input  name="Icon" type="file" class="form-control" />
                        @Html.ValidationMessageFor(m => m.Icon, "", new { @class = "text-danger" })
              
            </div>
            <div class="form-group">
                <input type="submit" value="@ViewData["ButtonTitle"]" class="btn btn-primary" />
            </div>
            </div>
        </form>
        </div>
        <div>
    <a asp-action="Index">Back to List</a>
</div>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
